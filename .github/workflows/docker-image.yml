# .github/workflows/deploy.yml
# 🚀 Pipeline CI/CD con SonarQube y despliegue en Docker (Self-Hosted Runner)

name: CI/CD with SonarQube and Docker

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  DOCKER_PROJECT_NAME: 'exam'
  APP_CONTAINER_NAME: 'product_app'

jobs:
  build-and-deploy:
    name: Build, Analyze and Deploy
    runs-on: self-hosted

    steps:
      - name: 🧾 Checkout del repositorio
        uses: actions/checkout@v4

      - name: ⚙️ Configurar Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: 🏗️ Compilar proyecto con Maven
        run: mvn -B clean package -DskipTests

      - name: 🔍 Análisis estático con SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=exam \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=${SONAR_TOKEN}

      - name: 🐳 Desplegar con Docker Compose
        run: |
          echo "✅ Iniciando despliegue en runner local..."

          cd docker

          echo "🧹 Limpiando despliegue anterior..."
          docker-compose -p ${{ env.DOCKER_PROJECT_NAME }} down -v --remove-orphans || echo "No hay contenedores previos."

          echo "🏗️ Levantando contenedor de la app..."
          docker-compose -p ${{ env.DOCKER_PROJECT_NAME }} up -d --build

          echo "🔍 Estado de los contenedores:"
          docker-compose -p ${{ env.DOCKER_PROJECT_NAME }} ps

          echo "📄 Últimos logs de la app:"
          docker logs --tail 50 ${{ env.APP_CONTAINER_NAME }}
